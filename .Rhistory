install.packages("readr")
history()
library(readr)
car_ped_stops <- read_csv("HLM/car_ped_stops.csv")
View(car_ped_stops)
library(readr)
hartford_r4 <- read_csv("HLM/hartford-r4.csv")
View(hartford_r4)
library(readr)
car_ped_stops <- read_csv("HLM/car_ped_stops.csv")
View(car_ped_stops)
frequency(districtoccur)
frequency(car_ped_stops$districtoccur)
frequency(districtoccur$car_ped_stops)
table(districtoccur)
table("districtoccur")
attach(car_ped_stops)
table1 <- table(districtoccur)
prop.table(table1)
margin.table(table1)
margin.table(table1, districtoccur)
margin.table(table1, 1)
table2 <- table(race, districtoccur,inside_or_outside, stoptype,gender)
margin.table(table2, 1)
margin.table(table2, 3)
margin.table(table2, 5)
hist(car_ped_stops$individual_arrested)
hist(car_ped_stops$individual_arrested,breaks=2)
counts <- table(car_ped_stops$race, car_ped_stops$individual_arrested)
barplot(counts, man="Arrests by Race",
xlab="Race", legend=rownames(counts))
hist(counts)
?barplot
View(counts)
counts <- table(car_ped_stops$individual_arrested, car_ped_stops$race)
hist(counts)
counts <- table(car_ped_stops$race, car_ped_stops$individual_arrested)
barplot(counts, main="Arrests by Race",
xlab="Race", legend=rownames(counts))
counts <- table(car_ped_stops$individual_arrested, car_ped_stops$race)
barplot(counts, main="Arrests by Race",
xlab="Race", legend=rownames(counts))
barplot(counts, main="Arrests by Race",
legend=rownames(counts))
length(table(car_ped_stops$districtoccur))
hist(table(car_ped_stops$districtoccur), main="", xlab = Number of Individuals per districtoccur)
hist(table(car_ped_stops$districtoccur), main="", xlab = "Number of Individuals per District")
install.packages("lme4")
library(lme4)
mod1 <- lmer(individual_arrested ~ 1 + (1|districtoccur), REML = F, data=car_ped_stops)
summary(mod1)
cassady <- read_csv("HLM/cassady.csv")
mlbook_red <- read.table("HLM/mlbook2_r.dat", header=TRUE)
variable.names(mlbook_red)
variable.names(cassady)
load("~/HLM/epsy6611week1data.RData")
variable.names(achieve)
attach(achieve)
lm(achieve$geread ~ achieve$freelnch)
lm(achieve$geread ~ achieve$freelnch) -> mod2
summary(mod2)
table3 <- table(achieve$freelnch)
View(table3)
margin.table(table3)
table3 <- table(freelnch)
View(table3)
table3 <- table(freelnch, school)
table3 <- table(freelnch)
margin.table(table3,1)
table3 <- table(freelnch, school)
margin.table(table3,2)
frequency(achieve$school)
frequency(school)
mod4 <- lmer(geread ~ 1 + (1 | school), REML = F, data = achieve)
summary(mod4)
mod5 <- lmer(geread ~ freelnch + (1|school), REML = F, data=achieve)
summary(mod1)
summary(mod5)
summary(mod4)
mod6 <- lmer(geread ~ freelnch + (freelnch|school), REML = F, data=achieve)
mod6 <- lmer(geread ~ 1 + (freelnch|school), REML = F, data=achieve)
mod6 <- lmer(geread ~ freelnch + (freelnch | school), REML = F, data=achieve)
mod5 <- lmer(geread ~ freelnch + (1 | school), REML = F, data=achieve)
summary(mod5)
summary(mod6)
save.image("~/R/workspace 9-24.RData")
load("~/R/workspace 9-24.RData")
summary(table3)
table(table3)
head(endersinter)
library(lme4)
mod1 <- lmer(wellbeing ~ 1 + (1|cluster), REML = F, data = endersinter)
mod2 <- lmer(wellbeing ~ hourscgm + (hourscgm|cluster), REML = F, data = endersinter)
summary(mod1)
summary(mod2)
mod3 <-lmer(wellbeing ~ sizecgm*hourscgm + (hourscgm|cluster), REML = F, data = endersinter)
mod3 <-lmer(wellbeing ~ sizecgm * hoursxbarjcgm + sizecgm * hourscgm + (hourscgm|cluster), REML = F, data = endersinter)
mod3 <-lmer(wellbeing ~ sizecgm*hourscgm + (hourscgm|cluster), REML = F, data = endersinter)
mod4 <-lmer(wellbeing ~ sizecgm * hoursxbarjcgm + sizecgm * hourscgm + (hourscgm|cluster), REML = F, data = endersinter)
summary(mod3)
summary(mod4)
lm1 <- lm(wellbeing ~ hourscgm, data = endersinter)
summary(lm1)
?plot
plot(endersinter$hourscgm, endersinter$wellbeing)
hist(by(endersinter$wellbeing, endersinter$cluster,mean))
var(by(endersinter$wellbeing,endersinter$cluster,mean))
mean(by(endersinter$wellbeing,endersinter$cluster,var))
var(endersinter$wellbeing)
lm(endersinter$wellbeing ~ endersinter$hoursxbarj)
lm2 <- lm(endersinter$wellbeing ~ endersinter$hoursxbarj)
summary(lm2)
plot(endersinter$hoursxbarj,endersinter$wellbeing)
plot(endersinter$size,endersinter$wellbeing)
plot(wellbeing ~ hoursxbarjcgm, data = endersinter[endersinter$sizecgm <0,])
install.packages(stargazer)
install.packages("stargazer"")
install.packages("stargazer")
install.packages("stargazer")
stargazer(mod1,mod2,mod3,mod4, type="text")
library(stargazer)
stargazer(mod1,mod2,mod3,mod4,type="text")
?plot
save.image("~/R/workspace 9-25.RData")
head(Langpp)
Langwide <- cbind(Lang[1:2], Lang[9:12], stack(Lang[3:8]))
Langwide$time <- as.numeric(Langwide$ind) - 1
names(Langwide)[7] <- "language"
head(Langwide)
Langpp[1:8, c(1,2,7:10)]
library(lattice)
interaction.plot(Langpp$time[Langpp$ID<25], Langpp$ID[Langpp$ID <25}, Langpp$language[Langpp$ID < 25], xlab="Time", ylab = "Language Score", legend = F])
interaction.plot(Langpp$time[Langpp$ID<25], Langpp$ID[Langpp$ID <25], Langpp$language[Langpp$ID < 25], xlab="Time", ylab = "Language Score", legend = F])
interaction.plot(Langpp$time[Langpp$ID<25], Langpp$ID[Langpp$ID <25], Langpp$language[Langpp$ID < 25], xlab="Time", ylab = "Language Score", legend = F)
xyplot(language~time |ID, data=Langpp[Langp$ID <20}, as.table=T])
xyplot(language~time |ID, data=Langpp[Langp$ID <20], as.table=T])
xyplot(language~time |ID, data=Langpp[Langp$ID <20], as.table=T)
xyplot(language~time |ID, data=Langpp[Langpp$ID <20], as.table=T)
xyplot(language~time |ID, data=Langpp[Langpp$ID <20,], as.table=T)
xyplot(language~time |ID, data=Langpp[Langpp$ID <20,], prepanel=function(x,y)
prepanel.loess(x,y,family = "gaussian"), xlab="Time", ylab="Language",
panel=function(x,y){
panel.xyplot(x,y)
panel.loess(x,y,family="gaussian")
}, ylim=c(160,250),as.table=T)
interaction.plot(Langpp$time, Langpp$school, Langpp$language, xlab="Time", ylab = "Language Score", legend = F)
mod1 <- lm(language ~ time, data=Langpp[Langpp$ID==1,])
mod2 <- lm(language ~ time, data=Langpp[Langpp$ID==2,])
mod3 <- lm(language ~ time, data=Langpp[Langpp$ID==3,])
summary(mod1)
mod1
mod2
mod3
mod4 <- lm(language ~ time, data=Langpp)
summary(mod4)
library(lme4)
mod5 <- lmer(language~ 1 + (1|ID), data=Langpp)
mod6 <- lmer(language ~ time + (1|ID), date = Langpp)
mod7 <- lmer(language ~ time + (time|ID), data = Langpp)
mod6 <- lmer(language ~ time + (1|ID), data = Langpp)
summary(mod6)
anova(mod5, mod6, mod7)
head(tolerance)
interaction.plot(tolerance$time, tolerance$ID, tolerance$tolerance, xlab="Time", ylab = "Tolerance Score", legend = F)
show(tolerance$id)
interaction.plot(tolerance$time, tolerance$id, tolerance$tolerance, xlab="Time", ylab = "Tolerance Score", legend = F)
xyplot(tolerance~time |id, data=tolerance,], as.table=T)
xyplot(tolerance~time |id, data=tolerance,, as.table=T)
xyplot(tolerance~time | id, data=tolerance, prepanel=function(x,y)
+     prepanel.loess(x,y,family = "gaussian"), xlab="Time", ylab="Tolerance",
+     panel=function(x,y){
+         panel.xyplot(x,y)
+         panel.loess(x,y,family="gaussian")
+     }, ylim=c(0,4),as.table=T)
xyplot(tolerance ~ time | id, data=tolerance, prepanel = function (x,
y) prepanel.loess(x, y, family = "gaussian", xlab="Time", ylab = "Tolerance",
panel=function(x,y){
panel.xyplot(x,y)
}))
xyplot(tolerance ~ time | id, data=tolerance, prepanel = function(x,                                                       y) prepanel.loess(x, y, family = "gaussian"), xlab="Time", ylab = "Tolerance",
panel=function(x,y){
panel.xyplot(x,y)
panel.loess(x,y,family="gaussian")
}, ylim=c(1, 4), as.table = T)
xyplot(tolerance ~ time | id, data=tolerance, prepanel = function(x,                                                       y) prepanel.loess(x, y, family = "gaussian"), xlab="Time", ylab = "Tolerance",
panel=function(x,y){
panel.xyplot(x,y)
panel.loess(x,y,family="gaussian")
}, ylim=c(0, 4), as.table = T)
xyplot(tolerance ~ time | id, data=tolerance, prepanel = function(x,                                                       y) prepanel.loess(x, y, family = "gaussian"), xlab="Time", ylab = "Tolerance",
panel=function(x,y){
panel.xyplot(x,y)
panel.loess(x,y,family="gaussian")
}, ylim=c(0, 5), as.table = T)
warnings()
mod1 <- lm(language ~ time, data=Langpp[Langpp$ID==1,])mod2 <- lm(language ~ time, data=Langpp[Langpp$ID==2,])
> mod3 <- lm(language ~ time, data=Langpp[Langpp$ID==3,])
mod1 <- lm(tolerance ~ time, data=tolerance[tolerance$id==9,]
mod2 <- lm(tolerance ~ time, data=tolerance[tolerance$id==45,]
mod2 <- lm(tolerance ~ time, data=tolerance[tolerance$id==45,]
mod2 <- lm(tolerance ~ time, data=tolerance[tolerance$id==45,]
mod2 <- lm(tolerance~time, data=tolerance[tolerance$id==45,])
mod3 <- lm(tolerance~time, data=tolerance[tolerance$id==268,])
mod1
mod2
mod3
mod1 <- (tolerance ~ time, data = tolerance[tolerance$id==9,])
mod1 <- (tolerance ~ time , data = tolerance[tolerance$id==9,])
mod1 <- (tolerance ~ time, data = tolerance[tolerance$id==9,])
mod1 <- lm(tolerance ~ time, data = tolerance[tolerance$id==9,])
mod1
mod2
mod3
mod5 <- lmer(tolerance~1 +(1|ID), data=tolerance)
mod5 <- lmer(tolerance~1 +(1|id), data=tolerance)
mod6 <- lmer(tolerance~time + (1|id), data=tolerance)
mod7 <- lmer(tolerance~time +(time|id), data=tolerance)
summary(mod5)
summary(mod6)
summary(mod7)
mod1 <- lmer(wellbeing ~ hourscwc+size+(1|cluster), data=endersfull)
mod2 <- lmer(wellbeing ~ hourscwc + size + (hourscwc|cluster), data=endersfull)
summary(mod1)
summary(mod2)
VarCorr(mod1)
VarCorr(mod2)
anova(mod1,mod2)
confint(mod2)
mod10 <- lmer(geread ~ freelnchcent + gemathcent + (gemathcent|school), data=achieve2)
summary(mod10)
lmer(geread ~ freelnchcent*gemathcent+(gemathcent|school), data=achieve2)
mod11 <- lmer(geread ~ freelnchcent*gemathcent+(gemathcent|school), data=achieve2)
summary(mod11)
anova(mod10,mod11)
View(car_ped_stops)
library(lme4)
mod1 <- lmer(individual_arrested ~ 1 + (1|districtoccur), REML = F, data = car_ped_stops)
summary(mod1)
names(car_ped_stops$race)
?names
frequency(car_ped_stops$race)
install.packages(plyr)
install.packages("plyr")
library(plyr)
count(car_ped_stops, 'race')
mod2 <- lmer(individual_arrested ~ race + (1|districtoccur), REML = F, data = car_ped_stops)
mod3 <- lmer(individual_arrested ~ race + (race|districtoccur), REML = F, data = car_ped_stops)
summary(mod2)
mod3 <- lmer(individual_arrested ~ 1 + (race|districtoccur), REML = F, data = car_ped_stops)
mod3 <- lmer(individual_arrested ~ race*gender + (1|districtoccur), REML = F, data = car_ped_stops)
summary(mod3)
anova(mod2,mod3)
View(introdata)
library(dplyr)
?dplyr
library(readxl)
X4_researchers <- read_excel("Participant Pool/spring 2020/mass testing data/4 researchers.xlsx")
View(X4_researchers)
library(readr)
monday_extra_credits <- read_csv("Participant Pool/spring 2020/mass testing data/mass testing monday only/monday extra credits.csv")
View(monday_extra_credits)
merge1 <- merge(x4_researchers, monday_extra_credits, by ="id"
)
merge1 <- merge(X4_researchers, monday_extra_credits, by ="id")
View(merge1)
left_join(X4_researchers, monday_extra_credits)
merged1 <- left_join(X4_researchers, monday_extra_credits)
View(merged1)
merged1 <- save.csv("merged1")
getwd()
write.csv(merged1, "merged1")
write.csv(merged1, "merged1.csv")
View(merged1)
View(mod4)
merged1 <- left_join(X4_researchers, monday_extra_credits, by="id")
View(merged1)
merged1 <- left_join(X4_researchers, monday_extra_credits)
View(merged1)
summary(Q358$X4_researchers)
summary(Q358)
Q338$X4_researchers
summary(X4_researchers$Q358)
sum(is.na(X4_researchers$Q358))
sum(is.na(merged1$Q358))
sum(is.na(X4_researchers$Q354))
sum(is.na(merged1$Q354))
sum(is.na(merged1$Q363_5))
sum(is.na(X4_researchers$Q363_5))
merged2 <- X4_researchers %>% left_join(monday_extra_credits, by ='id')
View(merged2)
merged1 <- left_join(X4_researchers, monday_extra_credits)
merged1 <- left_join(X4_researchers$Q360, monday_extra_credits)
merged2 <- X4_researchers %>% left_join(monday_extra_credits, by ='id') %>% mutate(value = ifelse(is.na(Q360), Q360, )
)
typeof(x4_researchers$Q360)
typeof(X4_researchers$Q360)
install.packages("devtools")
install.packages("devtools")
install.packages("data.table")
library(data.table)
library(devtools)
devtools::source_gist("4959237")
FillIn <- function(X4_researchers, monday_extra_credits, Q354, Var2 = NULL, KeyVar = c("id"))
if (is.null(Var2)){
Var2 <- Q354
} else {
Var2 <- Var2
}
D1 <- X4_researchers
D2 <- monday_extra_credits
Var1 <- D1$Q354
KeyVar <- c("id")
FillIn <- function(D1, D2, Var1, Var2 = NULL, KeyVar = c("id"))
{
# Give Var2 the same name as var1 if Var2 is NULL
if (is.null(Var2)){
Var2 <- Var1
} else {
Var2 <- Var2
}
# Give var a generic name
names(D1)[match(Var1, names(D1))] <- "VarGen"
names(D2)[match(Var2, names(D2))] <- "VarGen.1"
# Convert data frames to data.table type objects
D1Temp <- data.table::data.table(D1, key = KeyVar)
D2Temp <- data.table::data.table(D2, key = KeyVar)
# Merge data.tables
OutDT <- D2Temp[D1Temp]
# Tell the user how many values will be filled in
SubNA <- OutDT[, list(VarGen, VarGen.1)]
SubNA <- subset(SubNA, is.na(VarGen) & !is.na(VarGen.1))
print(paste(nrow(SubNA), "NAs were replaced."))
# Fill in missing values from D1 with values from D2
OutDT <- OutDT[is.na(VarGen), VarGen := VarGen.1]
# Convert back to data frame
OutDF <- data.frame(OutDT)
# Tell the user what the correlation coefficient is between the variables
SubNoNA <- subset(OutDF, !is.na(VarGen) & !is.na(VarGen.1))
HowMany <- nrow(SubNoNA)
CORR <- cor(SubNoNA$VarGen, SubNoNA$VarGen.1, use = "complete.obs")
print(paste("The correlation between", Var1, "and", Var2, "is", round(CORR, digits = 3), "based on", HowMany, "shared observations." ))
# Remove uncombined variable and return main variable's name
names(OutDF)[match("VarGen", names(OutDF))] <- Var1
Keepers <- setdiff(names(OutDF), "VarGen.1")
OutDF <- OutDF[, Keepers]
OutDF
}
FillIn <- function(D1, D2, Var1, Var2 = NULL, KeyVar = c("id"))
{
# Give Var2 the same name as var1 if Var2 is NULL
if (is.null(Var2)){
Var2 <- Var1
} else {
Var2 <- Var2
}
names(D1)[match(Var1, names(D1))] <- "VarGen"
names(D2)[match(Var2, names(D2))] <- "VarGen.1"
D1Temp <- data.table::data.table(D1, key = KeyVar)
D2Temp <- data.table::data.table(D2, key = KeyVar)
merged1 <- D2Temp[D1Temp]
SubNA <- OutDT[, list(VarGen, VarGen.1)]
SubNA <- subset(SubNA, is.na(VarGen) & !is.na(VarGen.1))
print(paste(nrow(SubNA), "NAs were replaced."))
OutDT <- OutDT[is.na(VarGen), VarGen := VarGen.1]
# Convert back to data frame
OutDF <- data.frame(OutDT)
names(OutDF)[match("VarGen", names(OutDF))] <- Var1
Keepers <- setdiff(names(OutDF), "VarGen.1")
OutDF <- OutDF[, Keepers]
OutDF
}
View(merged1)
sum(is.na(X4researcher$Q354))
sum(is.na(X4_researchers$Q354))
sum(is.na(merged1$Q354))
sum(is.na(merge1$Q354))
library(readr)
monday_extra_credits <- read_csv("ParticipantPool/spring2020/masstestingdata/mass testing monday only/monday extra credits.csv")
View(monday_extra_credits)
library(readxl)
X4_researchers <- read_excel("ParticipantPool/spring2020/masstestingdata/4 researchers.xlsx")
View(X4_researchers)
extra <- monday_extra_credits
almostfull <- X4_researchers
rm(monday_extra_credits)
rm(X4_researchers)
merge3 <- setDT(almostfull)[extra, on =c("id")][is.na(almostfull$Q354),
almostfull$Q534:= extra$Q354][, extra$Q534:=NULL][]
set.seed(4102020)
library(tidyverse)
library(ggplot2)
library(viridis)
library(cluster)
library(factoextra)
install.packages(factoextra)
library(factoextra)
install.packages("factoextra"")
install.packages("factoextra")
install.packages("factoextra")
library(factoextra)
library(cluster)
# read in the dataset
arrest_df = USArrests
View(arrest_df)
# clean out missing values, the tidyverse way
arrest_df = arrest_df %>%
drop_na() %>%
# convert state names from rowname to column
rownames_to_column(var="State")
# plot the assault rate by state
ggplot(data = arrest_df,
aes(x=Assault, y=State, color=UrbanPop)) +
geom_point() +
theme(legend.position="bottom")
# plot the murder rate by state
ggplot(data = arrest_df,
aes(x=Murder, y=State, color=UrbanPop)) +
geom_point() +
theme(legend.position="bottom")
# plot the rape rate by state
ggplot(data = arrest_df,
aes(x=Rape, y=State, color=UrbanPop)) +
geom_point() +
theme(legend.position="bottom")
# standardize each numeric variable
arrest_df = arrest_df %>%
mutate_if(is.numeric,scale)
# put State variable back to rowname
arrest_df = arrest_df %>%
column_to_rownames("State")
# let's make sure it works
head(arrest_df)
# calculate the distance matrix
arrest_distance_matrix = get_dist(arrest_df)
# visualize the distance matrix
fviz_dist(arrest_distance_matrix,
gradient = list(low = viridis(3)[1],
mid = viridis(3)[2],
high = viridis(3)[3]))
# apply the elbow method to figure out number of clusters
fviz_nbclust(arrest_df, kmeans, method = "wss")
# apply the silhouette method
fviz_nbclust(arrest_df, kmeans, method = "silhouette")
# run our clustering algorithm
arrest_clusters = kmeans(arrest_df, centers=4, nstart=15)
# see what we get!
arrest_clusters
# let's visualize our clusters on those first two principal components
fviz_cluster(arrest_clusters, data = arrest_df)
# run our 2-cluster clustering algorithm
arrest_clusters_k2 = kmeans(arrest_df, centers=2, nstart=15)
# see what we get!
arrest_clusters_k2
# what do our k=2 results look like?
fviz_cluster(arrest_clusters_k2, data = arrest_df)
library(readxl)
prescreen_demos <- read_excel("ParticipantPool/fall 2020/mass testing/prescreen_demos.xlsx")
View(prescreen_demos)
library(tidyverse)
prescreen_demos %>%
recode(if_else(Q8 < 18 = 0, 1))
prescreen_demos %>%
recode(if_else(Q8 < 18 == 0, 1))
recode(if_else(prescreen_demos$Q8 < 18 == 0, 1))
recode(if_else(prescreen_demos$Q8 < 18 = 0, 1))
recode(prescreen_demos$Q8, prescreen_demos$Q8 < 18 = 0, 1))
recode(prescreen_demos$Q8, prescreen_demos$Q8 < 18 = 0, 1))
prescreen_demos$age <- if_else(prescreen_demos$Q8 < 18, 0, 1)
prescreen_demos$ethnicity <- if_else(prescreen_demos$Q52 == "Not Hispanic or Latino", 0, 1)
library(readxl)
prescreen_demos <- read_excel("ParticipantPool/fall 2020/mass testing/prescreen_demos.xlsx")
View(prescreen_demos)
prescreen_demos$english <- if_else(prescreen_demos$Q47 == "Yes", 1, 0)
prescreen_demos$age <- if_else(prescreen_demos$Q8 < 18, 0, 1)
prescreen_demos$ethnicity <- if_else(prescreen_demos$Q52 == "Not Hispanic or Latino", 0, 1)
recode(prescreen_demos$Q55, "Man" == 1, "Woman" == 2, "Transgender Woman" == 3, "Transgender Man" == 4,
"Gender-queer/gender-fluid/gender-neutral"==5, "Intersex" ==6, "Other" == 7)
recode(prescreen_demos$Q55, "Man" == "1", "Woman" == "2", "Transgender Woman" == "3", "Transgender Man" == "4",
"Gender-queer/gender-fluid/gender-neutral"=="5", "Intersex" =="6", "Other" == "7")
prescreen_demos$gender <- recode(prescreen_demos$Q55, "Man" = 1, "Woman" = 2, "Transgender Woman" = 3, "Transgender Man" = 4,
"Gender-queer/gender-fluid/gender-neutral"=5, "Intersex" = 6, "Other" = 7)
write.csv(prescreen_demos, "prescreenrecode.csv")
setwd("~/GitHub/cassidyburt.github.io")
